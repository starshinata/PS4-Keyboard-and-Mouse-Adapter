// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Greeter.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GreeterProtos {

  /// <summary>Holder for reflection information generated from Greeter.proto</summary>
  public static partial class GreeterReflection {

    #region Descriptor
    /// <summary>File descriptor for Greeter.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GreeterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1HcmVldGVyLnByb3RvEg1HcmVldGVyUHJvdG9zIrQCCg5EdWFsU2hvY2tQ",
            "cm90bxIKCgJMMRgBIAEoCBIKCgJMMhgCIAEoBRIKCgJMMxgDIAEoCBIKCgJM",
            "WBgEIAEoBRIKCgJMWRgFIAEoBRIKCgJSMRgGIAEoCBIKCgJSMhgHIAEoBRIK",
            "CgJSMxgIIAEoCBIKCgJSWBgJIAEoBRIKCgJSWRgKIAEoBRIQCghUcmlhbmds",
            "ZRgLIAEoCBIOCgZDaXJjbGUYDCABKAgSDQoFQ3Jvc3MYDSABKAgSDgoGU3F1",
            "YXJlGA4gASgIEg8KB0RQYWRfVXAYDyABKAgSEQoJRFBhZF9Eb3duGBAgASgI",
            "EhEKCURQYWRfTGVmdBgRIAEoCBISCgpEUGFkX1JpZ2h0GBIgASgIEg0KBVNo",
            "YXJlGBMgASgIEg8KB09wdGlvbnMYFCABKAgiDwoNVXBkYXRlUmVxdWVzdCKH",
            "AQoOVXBkYXRlUmVzcG9uc2USDQoFc3RhbXAYASABKAkSGAoQSXNUb29sQmFy",
            "VmlzaWJsZRgCIAEoCBIVCg1FbXVsYXRpb25Nb2RlGAMgASgFEjUKDkR1YWxT",
            "aG9ja1Byb3RvGAQgASgLMh0uR3JlZXRlclByb3Rvcy5EdWFsU2hvY2tQcm90",
            "bzJaCg9HcmVldGluZ1NlcnZpY2USRwoIR3JlZXRpbmcSHC5HcmVldGVyUHJv",
            "dG9zLlVwZGF0ZVJlcXVlc3QaHS5HcmVldGVyUHJvdG9zLlVwZGF0ZVJlc3Bv",
            "bnNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GreeterProtos.DualShockProto), global::GreeterProtos.DualShockProto.Parser, new[]{ "L1", "L2", "L3", "LX", "LY", "R1", "R2", "R3", "RX", "RY", "Triangle", "Circle", "Cross", "Square", "DPadUp", "DPadDown", "DPadLeft", "DPadRight", "Share", "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GreeterProtos.UpdateRequest), global::GreeterProtos.UpdateRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GreeterProtos.UpdateResponse), global::GreeterProtos.UpdateResponse.Parser, new[]{ "Stamp", "IsToolBarVisible", "EmulationMode", "DualShockProto" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DualShockProto : pb::IMessage<DualShockProto> {
    private static readonly pb::MessageParser<DualShockProto> _parser = new pb::MessageParser<DualShockProto>(() => new DualShockProto());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DualShockProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GreeterProtos.GreeterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DualShockProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DualShockProto(DualShockProto other) : this() {
      l1_ = other.l1_;
      l2_ = other.l2_;
      l3_ = other.l3_;
      lX_ = other.lX_;
      lY_ = other.lY_;
      r1_ = other.r1_;
      r2_ = other.r2_;
      r3_ = other.r3_;
      rX_ = other.rX_;
      rY_ = other.rY_;
      triangle_ = other.triangle_;
      circle_ = other.circle_;
      cross_ = other.cross_;
      square_ = other.square_;
      dPadUp_ = other.dPadUp_;
      dPadDown_ = other.dPadDown_;
      dPadLeft_ = other.dPadLeft_;
      dPadRight_ = other.dPadRight_;
      share_ = other.share_;
      options_ = other.options_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DualShockProto Clone() {
      return new DualShockProto(this);
    }

    /// <summary>Field number for the "L1" field.</summary>
    public const int L1FieldNumber = 1;
    private bool l1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool L1 {
      get { return l1_; }
      set {
        l1_ = value;
      }
    }

    /// <summary>Field number for the "L2" field.</summary>
    public const int L2FieldNumber = 2;
    private int l2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int L2 {
      get { return l2_; }
      set {
        l2_ = value;
      }
    }

    /// <summary>Field number for the "L3" field.</summary>
    public const int L3FieldNumber = 3;
    private bool l3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool L3 {
      get { return l3_; }
      set {
        l3_ = value;
      }
    }

    /// <summary>Field number for the "LX" field.</summary>
    public const int LXFieldNumber = 4;
    private int lX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LX {
      get { return lX_; }
      set {
        lX_ = value;
      }
    }

    /// <summary>Field number for the "LY" field.</summary>
    public const int LYFieldNumber = 5;
    private int lY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LY {
      get { return lY_; }
      set {
        lY_ = value;
      }
    }

    /// <summary>Field number for the "R1" field.</summary>
    public const int R1FieldNumber = 6;
    private bool r1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool R1 {
      get { return r1_; }
      set {
        r1_ = value;
      }
    }

    /// <summary>Field number for the "R2" field.</summary>
    public const int R2FieldNumber = 7;
    private int r2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int R2 {
      get { return r2_; }
      set {
        r2_ = value;
      }
    }

    /// <summary>Field number for the "R3" field.</summary>
    public const int R3FieldNumber = 8;
    private bool r3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool R3 {
      get { return r3_; }
      set {
        r3_ = value;
      }
    }

    /// <summary>Field number for the "RX" field.</summary>
    public const int RXFieldNumber = 9;
    private int rX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RX {
      get { return rX_; }
      set {
        rX_ = value;
      }
    }

    /// <summary>Field number for the "RY" field.</summary>
    public const int RYFieldNumber = 10;
    private int rY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RY {
      get { return rY_; }
      set {
        rY_ = value;
      }
    }

    /// <summary>Field number for the "Triangle" field.</summary>
    public const int TriangleFieldNumber = 11;
    private bool triangle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Triangle {
      get { return triangle_; }
      set {
        triangle_ = value;
      }
    }

    /// <summary>Field number for the "Circle" field.</summary>
    public const int CircleFieldNumber = 12;
    private bool circle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Circle {
      get { return circle_; }
      set {
        circle_ = value;
      }
    }

    /// <summary>Field number for the "Cross" field.</summary>
    public const int CrossFieldNumber = 13;
    private bool cross_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cross {
      get { return cross_; }
      set {
        cross_ = value;
      }
    }

    /// <summary>Field number for the "Square" field.</summary>
    public const int SquareFieldNumber = 14;
    private bool square_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Square {
      get { return square_; }
      set {
        square_ = value;
      }
    }

    /// <summary>Field number for the "DPad_Up" field.</summary>
    public const int DPadUpFieldNumber = 15;
    private bool dPadUp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DPadUp {
      get { return dPadUp_; }
      set {
        dPadUp_ = value;
      }
    }

    /// <summary>Field number for the "DPad_Down" field.</summary>
    public const int DPadDownFieldNumber = 16;
    private bool dPadDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DPadDown {
      get { return dPadDown_; }
      set {
        dPadDown_ = value;
      }
    }

    /// <summary>Field number for the "DPad_Left" field.</summary>
    public const int DPadLeftFieldNumber = 17;
    private bool dPadLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DPadLeft {
      get { return dPadLeft_; }
      set {
        dPadLeft_ = value;
      }
    }

    /// <summary>Field number for the "DPad_Right" field.</summary>
    public const int DPadRightFieldNumber = 18;
    private bool dPadRight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DPadRight {
      get { return dPadRight_; }
      set {
        dPadRight_ = value;
      }
    }

    /// <summary>Field number for the "Share" field.</summary>
    public const int ShareFieldNumber = 19;
    private bool share_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Share {
      get { return share_; }
      set {
        share_ = value;
      }
    }

    /// <summary>Field number for the "Options" field.</summary>
    public const int OptionsFieldNumber = 20;
    private bool options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DualShockProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DualShockProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (L1 != other.L1) return false;
      if (L2 != other.L2) return false;
      if (L3 != other.L3) return false;
      if (LX != other.LX) return false;
      if (LY != other.LY) return false;
      if (R1 != other.R1) return false;
      if (R2 != other.R2) return false;
      if (R3 != other.R3) return false;
      if (RX != other.RX) return false;
      if (RY != other.RY) return false;
      if (Triangle != other.Triangle) return false;
      if (Circle != other.Circle) return false;
      if (Cross != other.Cross) return false;
      if (Square != other.Square) return false;
      if (DPadUp != other.DPadUp) return false;
      if (DPadDown != other.DPadDown) return false;
      if (DPadLeft != other.DPadLeft) return false;
      if (DPadRight != other.DPadRight) return false;
      if (Share != other.Share) return false;
      if (Options != other.Options) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (L1 != false) hash ^= L1.GetHashCode();
      if (L2 != 0) hash ^= L2.GetHashCode();
      if (L3 != false) hash ^= L3.GetHashCode();
      if (LX != 0) hash ^= LX.GetHashCode();
      if (LY != 0) hash ^= LY.GetHashCode();
      if (R1 != false) hash ^= R1.GetHashCode();
      if (R2 != 0) hash ^= R2.GetHashCode();
      if (R3 != false) hash ^= R3.GetHashCode();
      if (RX != 0) hash ^= RX.GetHashCode();
      if (RY != 0) hash ^= RY.GetHashCode();
      if (Triangle != false) hash ^= Triangle.GetHashCode();
      if (Circle != false) hash ^= Circle.GetHashCode();
      if (Cross != false) hash ^= Cross.GetHashCode();
      if (Square != false) hash ^= Square.GetHashCode();
      if (DPadUp != false) hash ^= DPadUp.GetHashCode();
      if (DPadDown != false) hash ^= DPadDown.GetHashCode();
      if (DPadLeft != false) hash ^= DPadLeft.GetHashCode();
      if (DPadRight != false) hash ^= DPadRight.GetHashCode();
      if (Share != false) hash ^= Share.GetHashCode();
      if (Options != false) hash ^= Options.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (L1 != false) {
        output.WriteRawTag(8);
        output.WriteBool(L1);
      }
      if (L2 != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(L2);
      }
      if (L3 != false) {
        output.WriteRawTag(24);
        output.WriteBool(L3);
      }
      if (LX != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LX);
      }
      if (LY != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LY);
      }
      if (R1 != false) {
        output.WriteRawTag(48);
        output.WriteBool(R1);
      }
      if (R2 != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(R2);
      }
      if (R3 != false) {
        output.WriteRawTag(64);
        output.WriteBool(R3);
      }
      if (RX != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RX);
      }
      if (RY != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RY);
      }
      if (Triangle != false) {
        output.WriteRawTag(88);
        output.WriteBool(Triangle);
      }
      if (Circle != false) {
        output.WriteRawTag(96);
        output.WriteBool(Circle);
      }
      if (Cross != false) {
        output.WriteRawTag(104);
        output.WriteBool(Cross);
      }
      if (Square != false) {
        output.WriteRawTag(112);
        output.WriteBool(Square);
      }
      if (DPadUp != false) {
        output.WriteRawTag(120);
        output.WriteBool(DPadUp);
      }
      if (DPadDown != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(DPadDown);
      }
      if (DPadLeft != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(DPadLeft);
      }
      if (DPadRight != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(DPadRight);
      }
      if (Share != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Share);
      }
      if (Options != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Options);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (L1 != false) {
        size += 1 + 1;
      }
      if (L2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(L2);
      }
      if (L3 != false) {
        size += 1 + 1;
      }
      if (LX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LX);
      }
      if (LY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LY);
      }
      if (R1 != false) {
        size += 1 + 1;
      }
      if (R2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(R2);
      }
      if (R3 != false) {
        size += 1 + 1;
      }
      if (RX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RX);
      }
      if (RY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RY);
      }
      if (Triangle != false) {
        size += 1 + 1;
      }
      if (Circle != false) {
        size += 1 + 1;
      }
      if (Cross != false) {
        size += 1 + 1;
      }
      if (Square != false) {
        size += 1 + 1;
      }
      if (DPadUp != false) {
        size += 1 + 1;
      }
      if (DPadDown != false) {
        size += 2 + 1;
      }
      if (DPadLeft != false) {
        size += 2 + 1;
      }
      if (DPadRight != false) {
        size += 2 + 1;
      }
      if (Share != false) {
        size += 2 + 1;
      }
      if (Options != false) {
        size += 2 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DualShockProto other) {
      if (other == null) {
        return;
      }
      if (other.L1 != false) {
        L1 = other.L1;
      }
      if (other.L2 != 0) {
        L2 = other.L2;
      }
      if (other.L3 != false) {
        L3 = other.L3;
      }
      if (other.LX != 0) {
        LX = other.LX;
      }
      if (other.LY != 0) {
        LY = other.LY;
      }
      if (other.R1 != false) {
        R1 = other.R1;
      }
      if (other.R2 != 0) {
        R2 = other.R2;
      }
      if (other.R3 != false) {
        R3 = other.R3;
      }
      if (other.RX != 0) {
        RX = other.RX;
      }
      if (other.RY != 0) {
        RY = other.RY;
      }
      if (other.Triangle != false) {
        Triangle = other.Triangle;
      }
      if (other.Circle != false) {
        Circle = other.Circle;
      }
      if (other.Cross != false) {
        Cross = other.Cross;
      }
      if (other.Square != false) {
        Square = other.Square;
      }
      if (other.DPadUp != false) {
        DPadUp = other.DPadUp;
      }
      if (other.DPadDown != false) {
        DPadDown = other.DPadDown;
      }
      if (other.DPadLeft != false) {
        DPadLeft = other.DPadLeft;
      }
      if (other.DPadRight != false) {
        DPadRight = other.DPadRight;
      }
      if (other.Share != false) {
        Share = other.Share;
      }
      if (other.Options != false) {
        Options = other.Options;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            L1 = input.ReadBool();
            break;
          }
          case 16: {
            L2 = input.ReadInt32();
            break;
          }
          case 24: {
            L3 = input.ReadBool();
            break;
          }
          case 32: {
            LX = input.ReadInt32();
            break;
          }
          case 40: {
            LY = input.ReadInt32();
            break;
          }
          case 48: {
            R1 = input.ReadBool();
            break;
          }
          case 56: {
            R2 = input.ReadInt32();
            break;
          }
          case 64: {
            R3 = input.ReadBool();
            break;
          }
          case 72: {
            RX = input.ReadInt32();
            break;
          }
          case 80: {
            RY = input.ReadInt32();
            break;
          }
          case 88: {
            Triangle = input.ReadBool();
            break;
          }
          case 96: {
            Circle = input.ReadBool();
            break;
          }
          case 104: {
            Cross = input.ReadBool();
            break;
          }
          case 112: {
            Square = input.ReadBool();
            break;
          }
          case 120: {
            DPadUp = input.ReadBool();
            break;
          }
          case 128: {
            DPadDown = input.ReadBool();
            break;
          }
          case 136: {
            DPadLeft = input.ReadBool();
            break;
          }
          case 144: {
            DPadRight = input.ReadBool();
            break;
          }
          case 152: {
            Share = input.ReadBool();
            break;
          }
          case 160: {
            Options = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRequest : pb::IMessage<UpdateRequest> {
    private static readonly pb::MessageParser<UpdateRequest> _parser = new pb::MessageParser<UpdateRequest>(() => new UpdateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GreeterProtos.GreeterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest(UpdateRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest Clone() {
      return new UpdateRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class UpdateResponse : pb::IMessage<UpdateResponse> {
    private static readonly pb::MessageParser<UpdateResponse> _parser = new pb::MessageParser<UpdateResponse>(() => new UpdateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GreeterProtos.GreeterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse(UpdateResponse other) : this() {
      stamp_ = other.stamp_;
      isToolBarVisible_ = other.isToolBarVisible_;
      emulationMode_ = other.emulationMode_;
      DualShockProto = other.dualShockProto_ != null ? other.DualShockProto.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse Clone() {
      return new UpdateResponse(this);
    }

    /// <summary>Field number for the "stamp" field.</summary>
    public const int StampFieldNumber = 1;
    private string stamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Stamp {
      get { return stamp_; }
      set {
        stamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsToolBarVisible" field.</summary>
    public const int IsToolBarVisibleFieldNumber = 2;
    private bool isToolBarVisible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsToolBarVisible {
      get { return isToolBarVisible_; }
      set {
        isToolBarVisible_ = value;
      }
    }

    /// <summary>Field number for the "EmulationMode" field.</summary>
    public const int EmulationModeFieldNumber = 3;
    private int emulationMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmulationMode {
      get { return emulationMode_; }
      set {
        emulationMode_ = value;
      }
    }

    /// <summary>Field number for the "DualShockProto" field.</summary>
    public const int DualShockProtoFieldNumber = 4;
    private global::GreeterProtos.DualShockProto dualShockProto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GreeterProtos.DualShockProto DualShockProto {
      get { return dualShockProto_; }
      set {
        dualShockProto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Stamp != other.Stamp) return false;
      if (IsToolBarVisible != other.IsToolBarVisible) return false;
      if (EmulationMode != other.EmulationMode) return false;
      if (!object.Equals(DualShockProto, other.DualShockProto)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Stamp.Length != 0) hash ^= Stamp.GetHashCode();
      if (IsToolBarVisible != false) hash ^= IsToolBarVisible.GetHashCode();
      if (EmulationMode != 0) hash ^= EmulationMode.GetHashCode();
      if (dualShockProto_ != null) hash ^= DualShockProto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Stamp.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Stamp);
      }
      if (IsToolBarVisible != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsToolBarVisible);
      }
      if (EmulationMode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EmulationMode);
      }
      if (dualShockProto_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(DualShockProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Stamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Stamp);
      }
      if (IsToolBarVisible != false) {
        size += 1 + 1;
      }
      if (EmulationMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmulationMode);
      }
      if (dualShockProto_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DualShockProto);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Stamp.Length != 0) {
        Stamp = other.Stamp;
      }
      if (other.IsToolBarVisible != false) {
        IsToolBarVisible = other.IsToolBarVisible;
      }
      if (other.EmulationMode != 0) {
        EmulationMode = other.EmulationMode;
      }
      if (other.dualShockProto_ != null) {
        if (dualShockProto_ == null) {
          dualShockProto_ = new global::GreeterProtos.DualShockProto();
        }
        DualShockProto.MergeFrom(other.DualShockProto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Stamp = input.ReadString();
            break;
          }
          case 16: {
            IsToolBarVisible = input.ReadBool();
            break;
          }
          case 24: {
            EmulationMode = input.ReadInt32();
            break;
          }
          case 34: {
            if (dualShockProto_ == null) {
              dualShockProto_ = new global::GreeterProtos.DualShockProto();
            }
            input.ReadMessage(dualShockProto_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
